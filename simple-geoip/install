#!/bin/sh

countries() {

awk '

BEGIN {
	arr = ""
	buf = ""
	print "module.exports ="
}

/^const char (\* )?GeoIP_country_/ {
	arr = $0
	i = index(arr, "_country_")
	if (i) {
		arr = substr(arr, i+9)
		i = index(arr, "[")
		arr = substr(arr, 1, i-1)
	}
	buf = ""
}

/\}\;$/ {
	buf = buf $0
	gsub(/.*{/, "", buf)
	gsub(/};/, "", buf)
	gsub(/	/, "", buf)
	if (arr) {
		print "	\"" arr "\": [" buf "]"
	}
	arr = ""
}

{
	if (arr) {
		buf = buf $0
	}
}

END {
}

'

}

timezones() {

awk '

BEGIN {
	country = ""
	region = ""
	print "module.exports ="
}

/strcmp \(country\, "([A-Z]+)"\)/ {
	if (country) s = $6; else s = $5
	country = substr(s,2,2)
	region = ""
}
/strcmp \(region\, \"([A-Z0-9]+)\"\)/ {
	if (region) s = $6; else s = $5
	region = substr(s,2,2)
}
/timezone = "/ {
	print "	\"" country region "\": \"" substr($3,2,length($3)-3) "\""
}

END {
}

'

}

currencies() {

awk '

BEGIN {
	done = 0
	code = ""
	num = ""
	name = ""
	print "module.exports ="
}
/		letter_code="([A-Z]+)"/ {
	code = substr($1,14,3)
}
/		numeric_code="([0-9]+)"/ {
	num = substr($1,15,3)
}
/		currency_name="([^"]+)"/ {
	name = substr($0,18)
	i = index(name, "\"")
	name = substr(name,1,i-1)
	if (!done) {
		print "	\"" code "\": {id: \"" code "\", code: \"" num "\", name: \"" name "\"}"
	}
}
/historic_iso_4217_entry/ {
	if (code) done = 1
}

END {
}

'

}

(
	if ! test -f GeoLiteCity.dat; then
		wget -t3 -c http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz -O GeoLiteCity.dat.part && mv GeoLiteCity.dat.part GeoLiteCity.dat.gz && gunzip GeoLiteCity.dat.gz
	fi
	mkdir -p .build
	cd .build
	# fetch libGeoIP sources
	V=1.4.7beta11
	if ! test -f GeoIP-$V/libGeoIP/GeoIP.c; then
		wget -t3 -c http://geolite.maxmind.com/download/geoip/api/c/test/GeoIP-$V.tar.gz
		tar -xzpf GeoIP-$V.tar.gz
	fi
	# fetch currencies
	if ! test -f iso4217.xml; then
		wget -t3 -c --no-check-certificate https://bitbucket.org/victorlin/correct_pycountry/raw/a144b415d051/src/pycountry/databases/iso4217.xml
	fi
	cd ..
	# extract info
	countries <.build/GeoIP-$V/libGeoIP/GeoIP.c >src/country.coffee
	timezones <.build/GeoIP-$V/libGeoIP/timeZone.c >src/timezone.coffee
	# TODO: parse also regionName.c
	# TODO: bind languages?, currencies?
	# ...
	#
	currencies <.build/iso4217.xml >src/currency.coffee
	# make the first run to get geo.json
	coffee src/index.coffee
	# compile coffee to js
	coffee -bc -o lib src/*
)

#
# ftp://elsie.nci.nih.gov/pub/tz{code,data}2011b.tar.gz
#
